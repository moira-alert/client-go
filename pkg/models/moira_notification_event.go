// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MoiraNotificationEvent moira notification event
//
// swagger:model moira.NotificationEvent
type MoiraNotificationEvent struct {

	// contact id
	ContactID string `json:"contact_id,omitempty"`

	// event message
	EventMessage struct {
		MoiraEventInfo
	} `json:"event_message,omitempty"`

	// metric
	// Example: carbon.agents.*.metricsReceived
	Metric string `json:"metric,omitempty"`

	// msg
	Msg *string `json:"msg,omitempty"`

	// old state
	// Example: ERROR
	OldState string `json:"old_state,omitempty"`

	// state
	// Example: OK
	State string `json:"state,omitempty"`

	// sub id
	SubID *string `json:"sub_id,omitempty"`

	// timestamp
	// Example: 1590741878
	Timestamp int64 `json:"timestamp,omitempty"`

	// trigger event
	// Example: true
	TriggerEvent bool `json:"trigger_event,omitempty"`

	// trigger id
	// Example: 5ff37996-8927-4cab-8987-970e80d8e0a8
	TriggerID string `json:"trigger_id,omitempty"`

	// value
	// Example: 70
	Value *float64 `json:"value,omitempty"`

	// values
	Values map[string]float64 `json:"values,omitempty"`
}

// Validate validates this moira notification event
func (m *MoiraNotificationEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoiraNotificationEvent) validateEventMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.EventMessage) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this moira notification event based on the context it is used
func (m *MoiraNotificationEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoiraNotificationEvent) contextValidateEventMessage(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *MoiraNotificationEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoiraNotificationEvent) UnmarshalBinary(b []byte) error {
	var res MoiraNotificationEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
