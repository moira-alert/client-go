// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoTreeOfProblems dto tree of problems
//
// swagger:model dto.TreeOfProblems
type DtoTreeOfProblems struct {

	// syntax ok
	// Example: true
	SyntaxOk bool `json:"syntax_ok,omitempty"`

	// tree of problems
	TreeOfProblems struct {
		DtoProblemOfTarget
	} `json:"tree_of_problems,omitempty"`
}

// Validate validates this dto tree of problems
func (m *DtoTreeOfProblems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTreeOfProblems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoTreeOfProblems) validateTreeOfProblems(formats strfmt.Registry) error {
	if swag.IsZero(m.TreeOfProblems) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this dto tree of problems based on the context it is used
func (m *DtoTreeOfProblems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTreeOfProblems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoTreeOfProblems) contextValidateTreeOfProblems(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DtoTreeOfProblems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoTreeOfProblems) UnmarshalBinary(b []byte) error {
	var res DtoTreeOfProblems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
