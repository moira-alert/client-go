// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoProblemOfTarget dto problem of target
//
// swagger:model dto.ProblemOfTarget
type DtoProblemOfTarget struct {

	// argument
	// Example: consolidateBy
	Argument string `json:"argument,omitempty"`

	// description
	// Example: This function affects only visual graph representation. It is meaningless in Moira
	Description string `json:"description,omitempty"`

	// position
	// Example: 0
	Position int64 `json:"position,omitempty"`

	// problems
	Problems []*DtoProblemOfTarget `json:"problems"`

	// type
	// Example: warn
	Type struct {
		DtoTypeOfProblem
	} `json:"type,omitempty"`
}

// Validate validates this dto problem of target
func (m *DtoProblemOfTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProblems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoProblemOfTarget) validateProblems(formats strfmt.Registry) error {
	if swag.IsZero(m.Problems) { // not required
		return nil
	}

	for i := 0; i < len(m.Problems); i++ {
		if swag.IsZero(m.Problems[i]) { // not required
			continue
		}

		if m.Problems[i] != nil {
			if err := m.Problems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("problems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("problems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoProblemOfTarget) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this dto problem of target based on the context it is used
func (m *DtoProblemOfTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProblems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoProblemOfTarget) contextValidateProblems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Problems); i++ {

		if m.Problems[i] != nil {

			if swag.IsZero(m.Problems[i]) { // not required
				return nil
			}

			if err := m.Problems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("problems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("problems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoProblemOfTarget) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DtoProblemOfTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoProblemOfTarget) UnmarshalBinary(b []byte) error {
	var res DtoProblemOfTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
