// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIWebConfig api web config
//
// swagger:model api.WebConfig
type APIWebConfig struct {

	// contacts
	Contacts []*APIWebContact `json:"contacts"`

	// feature flags
	FeatureFlags *APIFeatureFlags `json:"featureFlags,omitempty"`

	// metric source clusters
	MetricSourceClusters []*APIMetricSourceCluster `json:"metric_source_clusters"`

	// remote allowed
	// Example: true
	RemoteAllowed bool `json:"remoteAllowed,omitempty"`

	// sentry
	Sentry *APISentry `json:"sentry,omitempty"`

	// support email
	// Example: opensource@skbkontur.com
	SupportEmail string `json:"supportEmail,omitempty"`
}

// Validate validates this api web config
func (m *APIWebConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricSourceClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSentry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIWebConfig) validateContacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Contacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Contacts); i++ {
		if swag.IsZero(m.Contacts[i]) { // not required
			continue
		}

		if m.Contacts[i] != nil {
			if err := m.Contacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIWebConfig) validateFeatureFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.FeatureFlags) { // not required
		return nil
	}

	if m.FeatureFlags != nil {
		if err := m.FeatureFlags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featureFlags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featureFlags")
			}
			return err
		}
	}

	return nil
}

func (m *APIWebConfig) validateMetricSourceClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricSourceClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.MetricSourceClusters); i++ {
		if swag.IsZero(m.MetricSourceClusters[i]) { // not required
			continue
		}

		if m.MetricSourceClusters[i] != nil {
			if err := m.MetricSourceClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metric_source_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metric_source_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIWebConfig) validateSentry(formats strfmt.Registry) error {
	if swag.IsZero(m.Sentry) { // not required
		return nil
	}

	if m.Sentry != nil {
		if err := m.Sentry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sentry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sentry")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this api web config based on the context it is used
func (m *APIWebConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatureFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricSourceClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSentry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIWebConfig) contextValidateContacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Contacts); i++ {

		if m.Contacts[i] != nil {

			if swag.IsZero(m.Contacts[i]) { // not required
				return nil
			}

			if err := m.Contacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIWebConfig) contextValidateFeatureFlags(ctx context.Context, formats strfmt.Registry) error {

	if m.FeatureFlags != nil {

		if swag.IsZero(m.FeatureFlags) { // not required
			return nil
		}

		if err := m.FeatureFlags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featureFlags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featureFlags")
			}
			return err
		}
	}

	return nil
}

func (m *APIWebConfig) contextValidateMetricSourceClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetricSourceClusters); i++ {

		if m.MetricSourceClusters[i] != nil {

			if swag.IsZero(m.MetricSourceClusters[i]) { // not required
				return nil
			}

			if err := m.MetricSourceClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metric_source_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metric_source_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIWebConfig) contextValidateSentry(ctx context.Context, formats strfmt.Registry) error {

	if m.Sentry != nil {

		if swag.IsZero(m.Sentry) { // not required
			return nil
		}

		if err := m.Sentry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sentry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sentry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIWebConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIWebConfig) UnmarshalBinary(b []byte) error {
	var res APIWebConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
