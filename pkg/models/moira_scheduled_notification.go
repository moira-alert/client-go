// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MoiraScheduledNotification moira scheduled notification
//
// swagger:model moira.ScheduledNotification
type MoiraScheduledNotification struct {

	// contact
	Contact *MoiraContactData `json:"contact,omitempty"`

	// event
	Event *MoiraNotificationEvent `json:"event,omitempty"`

	// plotting
	Plotting *MoiraPlottingData `json:"plotting,omitempty"`

	// send fail
	// Example: 0
	SendFail int64 `json:"send_fail,omitempty"`

	// throttled
	// Example: false
	Throttled bool `json:"throttled,omitempty"`

	// timestamp
	// Example: 1594471927
	Timestamp int64 `json:"timestamp,omitempty"`

	// trigger
	Trigger *MoiraTriggerData `json:"trigger,omitempty"`
}

// Validate validates this moira scheduled notification
func (m *MoiraScheduledNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlotting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoiraScheduledNotification) validateContact(formats strfmt.Registry) error {
	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *MoiraScheduledNotification) validateEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *MoiraScheduledNotification) validatePlotting(formats strfmt.Registry) error {
	if swag.IsZero(m.Plotting) { // not required
		return nil
	}

	if m.Plotting != nil {
		if err := m.Plotting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plotting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plotting")
			}
			return err
		}
	}

	return nil
}

func (m *MoiraScheduledNotification) validateTrigger(formats strfmt.Registry) error {
	if swag.IsZero(m.Trigger) { // not required
		return nil
	}

	if m.Trigger != nil {
		if err := m.Trigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this moira scheduled notification based on the context it is used
func (m *MoiraScheduledNotification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlotting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrigger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoiraScheduledNotification) contextValidateContact(ctx context.Context, formats strfmt.Registry) error {

	if m.Contact != nil {

		if swag.IsZero(m.Contact) { // not required
			return nil
		}

		if err := m.Contact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *MoiraScheduledNotification) contextValidateEvent(ctx context.Context, formats strfmt.Registry) error {

	if m.Event != nil {

		if swag.IsZero(m.Event) { // not required
			return nil
		}

		if err := m.Event.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *MoiraScheduledNotification) contextValidatePlotting(ctx context.Context, formats strfmt.Registry) error {

	if m.Plotting != nil {

		if swag.IsZero(m.Plotting) { // not required
			return nil
		}

		if err := m.Plotting.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plotting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plotting")
			}
			return err
		}
	}

	return nil
}

func (m *MoiraScheduledNotification) contextValidateTrigger(ctx context.Context, formats strfmt.Registry) error {

	if m.Trigger != nil {

		if swag.IsZero(m.Trigger) { // not required
			return nil
		}

		if err := m.Trigger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MoiraScheduledNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoiraScheduledNotification) UnmarshalBinary(b []byte) error {
	var res MoiraScheduledNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
