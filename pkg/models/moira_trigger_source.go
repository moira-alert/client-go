// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MoiraTriggerSource moira trigger source
//
// swagger:model moira.TriggerSource
type MoiraTriggerSource string

func NewMoiraTriggerSource(value MoiraTriggerSource) *MoiraTriggerSource {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MoiraTriggerSource.
func (m MoiraTriggerSource) Pointer() *MoiraTriggerSource {
	return &m
}

const (

	// MoiraTriggerSourceEmpty captures enum value ""
	MoiraTriggerSourceEmpty MoiraTriggerSource = ""

	// MoiraTriggerSourceGraphiteLocal captures enum value "graphite_local"
	MoiraTriggerSourceGraphiteLocal MoiraTriggerSource = "graphite_local"

	// MoiraTriggerSourceGraphiteRemote captures enum value "graphite_remote"
	MoiraTriggerSourceGraphiteRemote MoiraTriggerSource = "graphite_remote"

	// MoiraTriggerSourcePrometheusRemote captures enum value "prometheus_remote"
	MoiraTriggerSourcePrometheusRemote MoiraTriggerSource = "prometheus_remote"
)

// for schema
var moiraTriggerSourceEnum []interface{}

func init() {
	var res []MoiraTriggerSource
	if err := json.Unmarshal([]byte(`["","graphite_local","graphite_remote","prometheus_remote"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moiraTriggerSourceEnum = append(moiraTriggerSourceEnum, v)
	}
}

func (m MoiraTriggerSource) validateMoiraTriggerSourceEnum(path, location string, value MoiraTriggerSource) error {
	if err := validate.EnumCase(path, location, value, moiraTriggerSourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this moira trigger source
func (m MoiraTriggerSource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMoiraTriggerSourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this moira trigger source based on context it is used
func (m MoiraTriggerSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
