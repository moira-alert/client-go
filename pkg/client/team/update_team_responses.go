// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moira-alert/client-go/pkg/models"
)

// UpdateTeamReader is a Reader for the UpdateTeam structure.
type UpdateTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTeamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateTeamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /teams/{teamID}] update-team", response, response.Code())
	}
}

// NewUpdateTeamOK creates a UpdateTeamOK with default headers values
func NewUpdateTeamOK() *UpdateTeamOK {
	return &UpdateTeamOK{}
}

/*
UpdateTeamOK describes a response with status code 200, with default header values.

Team updated successfully
*/
type UpdateTeamOK struct {
	Payload *models.DtoSaveTeamResponse
}

// IsSuccess returns true when this update team o k response has a 2xx status code
func (o *UpdateTeamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update team o k response has a 3xx status code
func (o *UpdateTeamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team o k response has a 4xx status code
func (o *UpdateTeamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update team o k response has a 5xx status code
func (o *UpdateTeamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update team o k response a status code equal to that given
func (o *UpdateTeamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update team o k response
func (o *UpdateTeamOK) Code() int {
	return 200
}

func (o *UpdateTeamOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamOK %s", 200, payload)
}

func (o *UpdateTeamOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamOK %s", 200, payload)
}

func (o *UpdateTeamOK) GetPayload() *models.DtoSaveTeamResponse {
	return o.Payload
}

func (o *UpdateTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DtoSaveTeamResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamBadRequest creates a UpdateTeamBadRequest with default headers values
func NewUpdateTeamBadRequest() *UpdateTeamBadRequest {
	return &UpdateTeamBadRequest{}
}

/*
UpdateTeamBadRequest describes a response with status code 400, with default header values.

Bad request from client
*/
type UpdateTeamBadRequest struct {
	Payload *models.APIErrorInvalidRequestExample
}

// IsSuccess returns true when this update team bad request response has a 2xx status code
func (o *UpdateTeamBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team bad request response has a 3xx status code
func (o *UpdateTeamBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team bad request response has a 4xx status code
func (o *UpdateTeamBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team bad request response has a 5xx status code
func (o *UpdateTeamBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update team bad request response a status code equal to that given
func (o *UpdateTeamBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update team bad request response
func (o *UpdateTeamBadRequest) Code() int {
	return 400
}

func (o *UpdateTeamBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamBadRequest %s", 400, payload)
}

func (o *UpdateTeamBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamBadRequest %s", 400, payload)
}

func (o *UpdateTeamBadRequest) GetPayload() *models.APIErrorInvalidRequestExample {
	return o.Payload
}

func (o *UpdateTeamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorInvalidRequestExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamForbidden creates a UpdateTeamForbidden with default headers values
func NewUpdateTeamForbidden() *UpdateTeamForbidden {
	return &UpdateTeamForbidden{}
}

/*
UpdateTeamForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateTeamForbidden struct {
	Payload *models.APIErrorForbiddenExample
}

// IsSuccess returns true when this update team forbidden response has a 2xx status code
func (o *UpdateTeamForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team forbidden response has a 3xx status code
func (o *UpdateTeamForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team forbidden response has a 4xx status code
func (o *UpdateTeamForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team forbidden response has a 5xx status code
func (o *UpdateTeamForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update team forbidden response a status code equal to that given
func (o *UpdateTeamForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update team forbidden response
func (o *UpdateTeamForbidden) Code() int {
	return 403
}

func (o *UpdateTeamForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamForbidden %s", 403, payload)
}

func (o *UpdateTeamForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamForbidden %s", 403, payload)
}

func (o *UpdateTeamForbidden) GetPayload() *models.APIErrorForbiddenExample {
	return o.Payload
}

func (o *UpdateTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorForbiddenExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamNotFound creates a UpdateTeamNotFound with default headers values
func NewUpdateTeamNotFound() *UpdateTeamNotFound {
	return &UpdateTeamNotFound{}
}

/*
UpdateTeamNotFound describes a response with status code 404, with default header values.

Resource not found
*/
type UpdateTeamNotFound struct {
	Payload *models.APIErrorNotFoundExample
}

// IsSuccess returns true when this update team not found response has a 2xx status code
func (o *UpdateTeamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team not found response has a 3xx status code
func (o *UpdateTeamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team not found response has a 4xx status code
func (o *UpdateTeamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team not found response has a 5xx status code
func (o *UpdateTeamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update team not found response a status code equal to that given
func (o *UpdateTeamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update team not found response
func (o *UpdateTeamNotFound) Code() int {
	return 404
}

func (o *UpdateTeamNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamNotFound %s", 404, payload)
}

func (o *UpdateTeamNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamNotFound %s", 404, payload)
}

func (o *UpdateTeamNotFound) GetPayload() *models.APIErrorNotFoundExample {
	return o.Payload
}

func (o *UpdateTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorNotFoundExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamUnprocessableEntity creates a UpdateTeamUnprocessableEntity with default headers values
func NewUpdateTeamUnprocessableEntity() *UpdateTeamUnprocessableEntity {
	return &UpdateTeamUnprocessableEntity{}
}

/*
UpdateTeamUnprocessableEntity describes a response with status code 422, with default header values.

Render error
*/
type UpdateTeamUnprocessableEntity struct {
	Payload *models.APIErrorRenderExample
}

// IsSuccess returns true when this update team unprocessable entity response has a 2xx status code
func (o *UpdateTeamUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team unprocessable entity response has a 3xx status code
func (o *UpdateTeamUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team unprocessable entity response has a 4xx status code
func (o *UpdateTeamUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team unprocessable entity response has a 5xx status code
func (o *UpdateTeamUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update team unprocessable entity response a status code equal to that given
func (o *UpdateTeamUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update team unprocessable entity response
func (o *UpdateTeamUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateTeamUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamUnprocessableEntity %s", 422, payload)
}

func (o *UpdateTeamUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamUnprocessableEntity %s", 422, payload)
}

func (o *UpdateTeamUnprocessableEntity) GetPayload() *models.APIErrorRenderExample {
	return o.Payload
}

func (o *UpdateTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorRenderExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamInternalServerError creates a UpdateTeamInternalServerError with default headers values
func NewUpdateTeamInternalServerError() *UpdateTeamInternalServerError {
	return &UpdateTeamInternalServerError{}
}

/*
UpdateTeamInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateTeamInternalServerError struct {
	Payload *models.APIErrorInternalServerExample
}

// IsSuccess returns true when this update team internal server error response has a 2xx status code
func (o *UpdateTeamInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team internal server error response has a 3xx status code
func (o *UpdateTeamInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team internal server error response has a 4xx status code
func (o *UpdateTeamInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update team internal server error response has a 5xx status code
func (o *UpdateTeamInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update team internal server error response a status code equal to that given
func (o *UpdateTeamInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update team internal server error response
func (o *UpdateTeamInternalServerError) Code() int {
	return 500
}

func (o *UpdateTeamInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamInternalServerError %s", 500, payload)
}

func (o *UpdateTeamInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /teams/{teamID}][%d] updateTeamInternalServerError %s", 500, payload)
}

func (o *UpdateTeamInternalServerError) GetPayload() *models.APIErrorInternalServerExample {
	return o.Payload
}

func (o *UpdateTeamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorInternalServerExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
