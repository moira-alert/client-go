// Code generated by go-swagger; DO NOT EDIT.

package contact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetContactEventsByIDParams creates a new GetContactEventsByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetContactEventsByIDParams() *GetContactEventsByIDParams {
	return &GetContactEventsByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetContactEventsByIDParamsWithTimeout creates a new GetContactEventsByIDParams object
// with the ability to set a timeout on a request.
func NewGetContactEventsByIDParamsWithTimeout(timeout time.Duration) *GetContactEventsByIDParams {
	return &GetContactEventsByIDParams{
		timeout: timeout,
	}
}

// NewGetContactEventsByIDParamsWithContext creates a new GetContactEventsByIDParams object
// with the ability to set a context for a request.
func NewGetContactEventsByIDParamsWithContext(ctx context.Context) *GetContactEventsByIDParams {
	return &GetContactEventsByIDParams{
		Context: ctx,
	}
}

// NewGetContactEventsByIDParamsWithHTTPClient creates a new GetContactEventsByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetContactEventsByIDParamsWithHTTPClient(client *http.Client) *GetContactEventsByIDParams {
	return &GetContactEventsByIDParams{
		HTTPClient: client,
	}
}

/*
GetContactEventsByIDParams contains all the parameters to send to the API endpoint

	for the get contact events by id operation.

	Typically these are written to a http.Request.
*/
type GetContactEventsByIDParams struct {

	/* ContactID.

	   Contact ID

	   Default: "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c"
	*/
	ContactID string

	/* From.

	   Start time of the time range

	   Default: "-3hour"
	*/
	From *string

	/* To.

	   End time of the time range

	   Default: "now"
	*/
	To *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get contact events by id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContactEventsByIDParams) WithDefaults() *GetContactEventsByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get contact events by id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContactEventsByIDParams) SetDefaults() {
	var (
		contactIDDefault = string("bcba82f5-48cf-44c0-b7d6-e1d32c64a88c")

		fromDefault = string("-3hour")

		toDefault = string("now")
	)

	val := GetContactEventsByIDParams{
		ContactID: contactIDDefault,
		From:      &fromDefault,
		To:        &toDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get contact events by id params
func (o *GetContactEventsByIDParams) WithTimeout(timeout time.Duration) *GetContactEventsByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get contact events by id params
func (o *GetContactEventsByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get contact events by id params
func (o *GetContactEventsByIDParams) WithContext(ctx context.Context) *GetContactEventsByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get contact events by id params
func (o *GetContactEventsByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get contact events by id params
func (o *GetContactEventsByIDParams) WithHTTPClient(client *http.Client) *GetContactEventsByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get contact events by id params
func (o *GetContactEventsByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContactID adds the contactID to the get contact events by id params
func (o *GetContactEventsByIDParams) WithContactID(contactID string) *GetContactEventsByIDParams {
	o.SetContactID(contactID)
	return o
}

// SetContactID adds the contactId to the get contact events by id params
func (o *GetContactEventsByIDParams) SetContactID(contactID string) {
	o.ContactID = contactID
}

// WithFrom adds the from to the get contact events by id params
func (o *GetContactEventsByIDParams) WithFrom(from *string) *GetContactEventsByIDParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get contact events by id params
func (o *GetContactEventsByIDParams) SetFrom(from *string) {
	o.From = from
}

// WithTo adds the to to the get contact events by id params
func (o *GetContactEventsByIDParams) WithTo(to *string) *GetContactEventsByIDParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get contact events by id params
func (o *GetContactEventsByIDParams) SetTo(to *string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetContactEventsByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contactID
	if err := r.SetPathParam("contactID", o.ContactID); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom string

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo string

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
