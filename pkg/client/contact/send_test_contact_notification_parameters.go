// Code generated by go-swagger; DO NOT EDIT.

package contact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSendTestContactNotificationParams creates a new SendTestContactNotificationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSendTestContactNotificationParams() *SendTestContactNotificationParams {
	return &SendTestContactNotificationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSendTestContactNotificationParamsWithTimeout creates a new SendTestContactNotificationParams object
// with the ability to set a timeout on a request.
func NewSendTestContactNotificationParamsWithTimeout(timeout time.Duration) *SendTestContactNotificationParams {
	return &SendTestContactNotificationParams{
		timeout: timeout,
	}
}

// NewSendTestContactNotificationParamsWithContext creates a new SendTestContactNotificationParams object
// with the ability to set a context for a request.
func NewSendTestContactNotificationParamsWithContext(ctx context.Context) *SendTestContactNotificationParams {
	return &SendTestContactNotificationParams{
		Context: ctx,
	}
}

// NewSendTestContactNotificationParamsWithHTTPClient creates a new SendTestContactNotificationParams object
// with the ability to set a custom HTTPClient for a request.
func NewSendTestContactNotificationParamsWithHTTPClient(client *http.Client) *SendTestContactNotificationParams {
	return &SendTestContactNotificationParams{
		HTTPClient: client,
	}
}

/*
SendTestContactNotificationParams contains all the parameters to send to the API endpoint

	for the send test contact notification operation.

	Typically these are written to a http.Request.
*/
type SendTestContactNotificationParams struct {

	/* ContactID.

	   The ID of the target contact

	   Default: "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c"
	*/
	ContactID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the send test contact notification params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SendTestContactNotificationParams) WithDefaults() *SendTestContactNotificationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the send test contact notification params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SendTestContactNotificationParams) SetDefaults() {
	var (
		contactIDDefault = string("bcba82f5-48cf-44c0-b7d6-e1d32c64a88c")
	)

	val := SendTestContactNotificationParams{
		ContactID: contactIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the send test contact notification params
func (o *SendTestContactNotificationParams) WithTimeout(timeout time.Duration) *SendTestContactNotificationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the send test contact notification params
func (o *SendTestContactNotificationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the send test contact notification params
func (o *SendTestContactNotificationParams) WithContext(ctx context.Context) *SendTestContactNotificationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the send test contact notification params
func (o *SendTestContactNotificationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the send test contact notification params
func (o *SendTestContactNotificationParams) WithHTTPClient(client *http.Client) *SendTestContactNotificationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the send test contact notification params
func (o *SendTestContactNotificationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContactID adds the contactID to the send test contact notification params
func (o *SendTestContactNotificationParams) WithContactID(contactID string) *SendTestContactNotificationParams {
	o.SetContactID(contactID)
	return o
}

// SetContactID adds the contactId to the send test contact notification params
func (o *SendTestContactNotificationParams) SetContactID(contactID string) {
	o.ContactID = contactID
}

// WriteToRequest writes these params to a swagger request
func (o *SendTestContactNotificationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contactID
	if err := r.SetPathParam("contactID", o.ContactID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
