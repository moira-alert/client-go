// Code generated by go-swagger; DO NOT EDIT.

package contact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new contact API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contact API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNewContact(params *CreateNewContactParams, opts ...ClientOption) (*CreateNewContactOK, error)

	GetAllContacts(params *GetAllContactsParams, opts ...ClientOption) (*GetAllContactsOK, error)

	GetContactByID(params *GetContactByIDParams, opts ...ClientOption) (*GetContactByIDOK, error)

	GetContactEventsByID(params *GetContactEventsByIDParams, opts ...ClientOption) (*GetContactEventsByIDOK, error)

	RemoveContact(params *RemoveContactParams, opts ...ClientOption) (*RemoveContactOK, error)

	SendTestContactNotification(params *SendTestContactNotificationParams, opts ...ClientOption) (*SendTestContactNotificationOK, error)

	UpdateContact(params *UpdateContactParams, opts ...ClientOption) (*UpdateContactOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateNewContact creates a new contact notification for the current user
*/
func (a *Client) CreateNewContact(params *CreateNewContactParams, opts ...ClientOption) (*CreateNewContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNewContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-new-contact",
		Method:             "PUT",
		PathPattern:        "/contact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNewContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNewContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-new-contact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllContacts gets all moira contacts
*/
func (a *Client) GetAllContacts(params *GetAllContactsParams, opts ...ClientOption) (*GetAllContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-all-contacts",
		Method:             "GET",
		PathPattern:        "/contact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllContactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-all-contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContactByID gets contact by ID
*/
func (a *Client) GetContactByID(params *GetContactByIDParams, opts ...ClientOption) (*GetContactByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-contact-by-id",
		Method:             "GET",
		PathPattern:        "/contact/{contactID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContactByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-contact-by-id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContactEventsByID gets contact events by ID with time range
*/
func (a *Client) GetContactEventsByID(params *GetContactEventsByIDParams, opts ...ClientOption) (*GetContactEventsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactEventsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-contact-events-by-id",
		Method:             "GET",
		PathPattern:        "/contact/{contactID}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContactEventsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactEventsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-contact-events-by-id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveContact deletes notification contact for the current user and remove the contact ID from all subscriptions
*/
func (a *Client) RemoveContact(params *RemoveContactParams, opts ...ClientOption) (*RemoveContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "remove-contact",
		Method:             "DELETE",
		PathPattern:        "/contact/{contactID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for remove-contact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SendTestContactNotification pushes a test notification to verify that the contact is properly set up
*/
func (a *Client) SendTestContactNotification(params *SendTestContactNotificationParams, opts ...ClientOption) (*SendTestContactNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendTestContactNotificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "send-test-contact-notification",
		Method:             "POST",
		PathPattern:        "/contact/{contactID}/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendTestContactNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendTestContactNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for send-test-contact-notification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateContact updates an existing notification contact to the values passed in the request body
*/
func (a *Client) UpdateContact(params *UpdateContactParams, opts ...ClientOption) (*UpdateContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-contact",
		Method:             "PUT",
		PathPattern:        "/contact/{contactID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-contact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
