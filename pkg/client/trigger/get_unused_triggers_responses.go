// Code generated by go-swagger; DO NOT EDIT.

package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moira-alert/client-go/pkg/models"
)

// GetUnusedTriggersReader is a Reader for the GetUnusedTriggers structure.
type GetUnusedTriggersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUnusedTriggersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUnusedTriggersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewGetUnusedTriggersUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUnusedTriggersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /trigger] get-unused-triggers", response, response.Code())
	}
}

// NewGetUnusedTriggersOK creates a GetUnusedTriggersOK with default headers values
func NewGetUnusedTriggersOK() *GetUnusedTriggersOK {
	return &GetUnusedTriggersOK{}
}

/*
GetUnusedTriggersOK describes a response with status code 200, with default header values.

Fetched unused triggers
*/
type GetUnusedTriggersOK struct {
	Payload *models.DtoTriggersList
}

// IsSuccess returns true when this get unused triggers o k response has a 2xx status code
func (o *GetUnusedTriggersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get unused triggers o k response has a 3xx status code
func (o *GetUnusedTriggersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get unused triggers o k response has a 4xx status code
func (o *GetUnusedTriggersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get unused triggers o k response has a 5xx status code
func (o *GetUnusedTriggersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get unused triggers o k response a status code equal to that given
func (o *GetUnusedTriggersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get unused triggers o k response
func (o *GetUnusedTriggersOK) Code() int {
	return 200
}

func (o *GetUnusedTriggersOK) Error() string {
	return fmt.Sprintf("[GET /trigger][%d] getUnusedTriggersOK  %+v", 200, o.Payload)
}

func (o *GetUnusedTriggersOK) String() string {
	return fmt.Sprintf("[GET /trigger][%d] getUnusedTriggersOK  %+v", 200, o.Payload)
}

func (o *GetUnusedTriggersOK) GetPayload() *models.DtoTriggersList {
	return o.Payload
}

func (o *GetUnusedTriggersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DtoTriggersList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUnusedTriggersUnprocessableEntity creates a GetUnusedTriggersUnprocessableEntity with default headers values
func NewGetUnusedTriggersUnprocessableEntity() *GetUnusedTriggersUnprocessableEntity {
	return &GetUnusedTriggersUnprocessableEntity{}
}

/*
GetUnusedTriggersUnprocessableEntity describes a response with status code 422, with default header values.

Render error
*/
type GetUnusedTriggersUnprocessableEntity struct {
	Payload *models.APIErrorRenderExample
}

// IsSuccess returns true when this get unused triggers unprocessable entity response has a 2xx status code
func (o *GetUnusedTriggersUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get unused triggers unprocessable entity response has a 3xx status code
func (o *GetUnusedTriggersUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get unused triggers unprocessable entity response has a 4xx status code
func (o *GetUnusedTriggersUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get unused triggers unprocessable entity response has a 5xx status code
func (o *GetUnusedTriggersUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get unused triggers unprocessable entity response a status code equal to that given
func (o *GetUnusedTriggersUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get unused triggers unprocessable entity response
func (o *GetUnusedTriggersUnprocessableEntity) Code() int {
	return 422
}

func (o *GetUnusedTriggersUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /trigger][%d] getUnusedTriggersUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetUnusedTriggersUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /trigger][%d] getUnusedTriggersUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetUnusedTriggersUnprocessableEntity) GetPayload() *models.APIErrorRenderExample {
	return o.Payload
}

func (o *GetUnusedTriggersUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorRenderExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUnusedTriggersInternalServerError creates a GetUnusedTriggersInternalServerError with default headers values
func NewGetUnusedTriggersInternalServerError() *GetUnusedTriggersInternalServerError {
	return &GetUnusedTriggersInternalServerError{}
}

/*
GetUnusedTriggersInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetUnusedTriggersInternalServerError struct {
	Payload *models.APIErrorInternalServerExample
}

// IsSuccess returns true when this get unused triggers internal server error response has a 2xx status code
func (o *GetUnusedTriggersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get unused triggers internal server error response has a 3xx status code
func (o *GetUnusedTriggersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get unused triggers internal server error response has a 4xx status code
func (o *GetUnusedTriggersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get unused triggers internal server error response has a 5xx status code
func (o *GetUnusedTriggersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get unused triggers internal server error response a status code equal to that given
func (o *GetUnusedTriggersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get unused triggers internal server error response
func (o *GetUnusedTriggersInternalServerError) Code() int {
	return 500
}

func (o *GetUnusedTriggersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /trigger][%d] getUnusedTriggersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUnusedTriggersInternalServerError) String() string {
	return fmt.Sprintf("[GET /trigger][%d] getUnusedTriggersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUnusedTriggersInternalServerError) GetPayload() *models.APIErrorInternalServerExample {
	return o.Payload
}

func (o *GetUnusedTriggersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorInternalServerExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
