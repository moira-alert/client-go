// Code generated by go-swagger; DO NOT EDIT.

package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRenderTriggerMetricsParams creates a new RenderTriggerMetricsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRenderTriggerMetricsParams() *RenderTriggerMetricsParams {
	return &RenderTriggerMetricsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRenderTriggerMetricsParamsWithTimeout creates a new RenderTriggerMetricsParams object
// with the ability to set a timeout on a request.
func NewRenderTriggerMetricsParamsWithTimeout(timeout time.Duration) *RenderTriggerMetricsParams {
	return &RenderTriggerMetricsParams{
		timeout: timeout,
	}
}

// NewRenderTriggerMetricsParamsWithContext creates a new RenderTriggerMetricsParams object
// with the ability to set a context for a request.
func NewRenderTriggerMetricsParamsWithContext(ctx context.Context) *RenderTriggerMetricsParams {
	return &RenderTriggerMetricsParams{
		Context: ctx,
	}
}

// NewRenderTriggerMetricsParamsWithHTTPClient creates a new RenderTriggerMetricsParams object
// with the ability to set a custom HTTPClient for a request.
func NewRenderTriggerMetricsParamsWithHTTPClient(client *http.Client) *RenderTriggerMetricsParams {
	return &RenderTriggerMetricsParams{
		HTTPClient: client,
	}
}

/*
RenderTriggerMetricsParams contains all the parameters to send to the API endpoint

	for the render trigger metrics operation.

	Typically these are written to a http.Request.
*/
type RenderTriggerMetricsParams struct {

	/* From.

	   Start time for metrics retrieval

	   Default: "-1hour"
	*/
	From *string

	/* Realtime.

	   Fetch real-time data
	*/
	Realtime *bool

	/* Target.

	   Target metric name

	   Default: "t1"
	*/
	Target *string

	/* Theme.

	   Plot theme

	   Default: "light"
	*/
	Theme *string

	/* Timezone.

	   Timezone for rendering

	   Default: "UTC"
	*/
	Timezone *string

	/* To.

	   End time for metrics retrieval

	   Default: "now"
	*/
	To *string

	/* TriggerID.

	   Trigger ID

	   Default: "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c"
	*/
	TriggerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the render trigger metrics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RenderTriggerMetricsParams) WithDefaults() *RenderTriggerMetricsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the render trigger metrics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RenderTriggerMetricsParams) SetDefaults() {
	var (
		fromDefault = string("-1hour")

		realtimeDefault = bool(false)

		targetDefault = string("t1")

		themeDefault = string("light")

		timezoneDefault = string("UTC")

		toDefault = string("now")

		triggerIDDefault = string("bcba82f5-48cf-44c0-b7d6-e1d32c64a88c")
	)

	val := RenderTriggerMetricsParams{
		From:      &fromDefault,
		Realtime:  &realtimeDefault,
		Target:    &targetDefault,
		Theme:     &themeDefault,
		Timezone:  &timezoneDefault,
		To:        &toDefault,
		TriggerID: triggerIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithTimeout(timeout time.Duration) *RenderTriggerMetricsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithContext(ctx context.Context) *RenderTriggerMetricsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithHTTPClient(client *http.Client) *RenderTriggerMetricsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithFrom(from *string) *RenderTriggerMetricsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetFrom(from *string) {
	o.From = from
}

// WithRealtime adds the realtime to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithRealtime(realtime *bool) *RenderTriggerMetricsParams {
	o.SetRealtime(realtime)
	return o
}

// SetRealtime adds the realtime to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetRealtime(realtime *bool) {
	o.Realtime = realtime
}

// WithTarget adds the target to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithTarget(target *string) *RenderTriggerMetricsParams {
	o.SetTarget(target)
	return o
}

// SetTarget adds the target to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetTarget(target *string) {
	o.Target = target
}

// WithTheme adds the theme to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithTheme(theme *string) *RenderTriggerMetricsParams {
	o.SetTheme(theme)
	return o
}

// SetTheme adds the theme to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetTheme(theme *string) {
	o.Theme = theme
}

// WithTimezone adds the timezone to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithTimezone(timezone *string) *RenderTriggerMetricsParams {
	o.SetTimezone(timezone)
	return o
}

// SetTimezone adds the timezone to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetTimezone(timezone *string) {
	o.Timezone = timezone
}

// WithTo adds the to to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithTo(to *string) *RenderTriggerMetricsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetTo(to *string) {
	o.To = to
}

// WithTriggerID adds the triggerID to the render trigger metrics params
func (o *RenderTriggerMetricsParams) WithTriggerID(triggerID string) *RenderTriggerMetricsParams {
	o.SetTriggerID(triggerID)
	return o
}

// SetTriggerID adds the triggerId to the render trigger metrics params
func (o *RenderTriggerMetricsParams) SetTriggerID(triggerID string) {
	o.TriggerID = triggerID
}

// WriteToRequest writes these params to a swagger request
func (o *RenderTriggerMetricsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom string

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.Realtime != nil {

		// query param realtime
		var qrRealtime bool

		if o.Realtime != nil {
			qrRealtime = *o.Realtime
		}
		qRealtime := swag.FormatBool(qrRealtime)
		if qRealtime != "" {

			if err := r.SetQueryParam("realtime", qRealtime); err != nil {
				return err
			}
		}
	}

	if o.Target != nil {

		// query param target
		var qrTarget string

		if o.Target != nil {
			qrTarget = *o.Target
		}
		qTarget := qrTarget
		if qTarget != "" {

			if err := r.SetQueryParam("target", qTarget); err != nil {
				return err
			}
		}
	}

	if o.Theme != nil {

		// query param theme
		var qrTheme string

		if o.Theme != nil {
			qrTheme = *o.Theme
		}
		qTheme := qrTheme
		if qTheme != "" {

			if err := r.SetQueryParam("theme", qTheme); err != nil {
				return err
			}
		}
	}

	if o.Timezone != nil {

		// query param timezone
		var qrTimezone string

		if o.Timezone != nil {
			qrTimezone = *o.Timezone
		}
		qTimezone := qrTimezone
		if qTimezone != "" {

			if err := r.SetQueryParam("timezone", qTimezone); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo string

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	// path param triggerID
	if err := r.SetPathParam("triggerID", o.TriggerID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
