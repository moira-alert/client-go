// Code generated by go-swagger; DO NOT EDIT.

package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/moira-alert/client-go/pkg/models"
)

// NewCreateTriggerParams creates a new CreateTriggerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateTriggerParams() *CreateTriggerParams {
	return &CreateTriggerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateTriggerParamsWithTimeout creates a new CreateTriggerParams object
// with the ability to set a timeout on a request.
func NewCreateTriggerParamsWithTimeout(timeout time.Duration) *CreateTriggerParams {
	return &CreateTriggerParams{
		timeout: timeout,
	}
}

// NewCreateTriggerParamsWithContext creates a new CreateTriggerParams object
// with the ability to set a context for a request.
func NewCreateTriggerParamsWithContext(ctx context.Context) *CreateTriggerParams {
	return &CreateTriggerParams{
		Context: ctx,
	}
}

// NewCreateTriggerParamsWithHTTPClient creates a new CreateTriggerParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateTriggerParamsWithHTTPClient(client *http.Client) *CreateTriggerParams {
	return &CreateTriggerParams{
		HTTPClient: client,
	}
}

/*
CreateTriggerParams contains all the parameters to send to the API endpoint

	for the create trigger operation.

	Typically these are written to a http.Request.
*/
type CreateTriggerParams struct {

	/* Trigger.

	   Trigger data
	*/
	Trigger *models.DtoTrigger

	/* Validate.

	   For validating targets
	*/
	Validate *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create trigger params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateTriggerParams) WithDefaults() *CreateTriggerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create trigger params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateTriggerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create trigger params
func (o *CreateTriggerParams) WithTimeout(timeout time.Duration) *CreateTriggerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create trigger params
func (o *CreateTriggerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create trigger params
func (o *CreateTriggerParams) WithContext(ctx context.Context) *CreateTriggerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create trigger params
func (o *CreateTriggerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create trigger params
func (o *CreateTriggerParams) WithHTTPClient(client *http.Client) *CreateTriggerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create trigger params
func (o *CreateTriggerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTrigger adds the trigger to the create trigger params
func (o *CreateTriggerParams) WithTrigger(trigger *models.DtoTrigger) *CreateTriggerParams {
	o.SetTrigger(trigger)
	return o
}

// SetTrigger adds the trigger to the create trigger params
func (o *CreateTriggerParams) SetTrigger(trigger *models.DtoTrigger) {
	o.Trigger = trigger
}

// WithValidate adds the validate to the create trigger params
func (o *CreateTriggerParams) WithValidate(validate *bool) *CreateTriggerParams {
	o.SetValidate(validate)
	return o
}

// SetValidate adds the validate to the create trigger params
func (o *CreateTriggerParams) SetValidate(validate *bool) {
	o.Validate = validate
}

// WriteToRequest writes these params to a swagger request
func (o *CreateTriggerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Trigger != nil {
		if err := r.SetBodyParam(o.Trigger); err != nil {
			return err
		}
	}

	if o.Validate != nil {

		// query param validate
		var qrValidate bool

		if o.Validate != nil {
			qrValidate = *o.Validate
		}
		qValidate := swag.FormatBool(qrValidate)
		if qValidate != "" {

			if err := r.SetQueryParam("validate", qValidate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
