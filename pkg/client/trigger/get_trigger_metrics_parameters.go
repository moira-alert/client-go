// Code generated by go-swagger; DO NOT EDIT.

package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetTriggerMetricsParams creates a new GetTriggerMetricsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTriggerMetricsParams() *GetTriggerMetricsParams {
	return &GetTriggerMetricsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTriggerMetricsParamsWithTimeout creates a new GetTriggerMetricsParams object
// with the ability to set a timeout on a request.
func NewGetTriggerMetricsParamsWithTimeout(timeout time.Duration) *GetTriggerMetricsParams {
	return &GetTriggerMetricsParams{
		timeout: timeout,
	}
}

// NewGetTriggerMetricsParamsWithContext creates a new GetTriggerMetricsParams object
// with the ability to set a context for a request.
func NewGetTriggerMetricsParamsWithContext(ctx context.Context) *GetTriggerMetricsParams {
	return &GetTriggerMetricsParams{
		Context: ctx,
	}
}

// NewGetTriggerMetricsParamsWithHTTPClient creates a new GetTriggerMetricsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTriggerMetricsParamsWithHTTPClient(client *http.Client) *GetTriggerMetricsParams {
	return &GetTriggerMetricsParams{
		HTTPClient: client,
	}
}

/*
GetTriggerMetricsParams contains all the parameters to send to the API endpoint

	for the get trigger metrics operation.

	Typically these are written to a http.Request.
*/
type GetTriggerMetricsParams struct {

	/* From.

	   Start time for metrics retrieval

	   Default: "-10minutes"
	*/
	From *string

	/* To.

	   End time for metrics retrieval

	   Default: "now"
	*/
	To *string

	/* TriggerID.

	   Trigger ID

	   Default: "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c"
	*/
	TriggerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get trigger metrics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTriggerMetricsParams) WithDefaults() *GetTriggerMetricsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get trigger metrics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTriggerMetricsParams) SetDefaults() {
	var (
		fromDefault = string("-10minutes")

		toDefault = string("now")

		triggerIDDefault = string("bcba82f5-48cf-44c0-b7d6-e1d32c64a88c")
	)

	val := GetTriggerMetricsParams{
		From:      &fromDefault,
		To:        &toDefault,
		TriggerID: triggerIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get trigger metrics params
func (o *GetTriggerMetricsParams) WithTimeout(timeout time.Duration) *GetTriggerMetricsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get trigger metrics params
func (o *GetTriggerMetricsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get trigger metrics params
func (o *GetTriggerMetricsParams) WithContext(ctx context.Context) *GetTriggerMetricsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get trigger metrics params
func (o *GetTriggerMetricsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get trigger metrics params
func (o *GetTriggerMetricsParams) WithHTTPClient(client *http.Client) *GetTriggerMetricsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get trigger metrics params
func (o *GetTriggerMetricsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the get trigger metrics params
func (o *GetTriggerMetricsParams) WithFrom(from *string) *GetTriggerMetricsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get trigger metrics params
func (o *GetTriggerMetricsParams) SetFrom(from *string) {
	o.From = from
}

// WithTo adds the to to the get trigger metrics params
func (o *GetTriggerMetricsParams) WithTo(to *string) *GetTriggerMetricsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get trigger metrics params
func (o *GetTriggerMetricsParams) SetTo(to *string) {
	o.To = to
}

// WithTriggerID adds the triggerID to the get trigger metrics params
func (o *GetTriggerMetricsParams) WithTriggerID(triggerID string) *GetTriggerMetricsParams {
	o.SetTriggerID(triggerID)
	return o
}

// SetTriggerID adds the triggerId to the get trigger metrics params
func (o *GetTriggerMetricsParams) SetTriggerID(triggerID string) {
	o.TriggerID = triggerID
}

// WriteToRequest writes these params to a swagger request
func (o *GetTriggerMetricsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom string

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo string

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	// path param triggerID
	if err := r.SetPathParam("triggerID", o.TriggerID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
