// Code generated by go-swagger; DO NOT EDIT.

package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moira-alert/client-go/pkg/models"
)

// RenderTriggerMetricsReader is a Reader for the RenderTriggerMetrics structure.
type RenderTriggerMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenderTriggerMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRenderTriggerMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRenderTriggerMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenderTriggerMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRenderTriggerMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /trigger/{triggerID}/render] render-trigger-metrics", response, response.Code())
	}
}

// NewRenderTriggerMetricsOK creates a RenderTriggerMetricsOK with default headers values
func NewRenderTriggerMetricsOK() *RenderTriggerMetricsOK {
	return &RenderTriggerMetricsOK{}
}

/*
RenderTriggerMetricsOK describes a response with status code 200, with default header values.

Rendered plot image successfully
*/
type RenderTriggerMetricsOK struct {
}

// IsSuccess returns true when this render trigger metrics o k response has a 2xx status code
func (o *RenderTriggerMetricsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this render trigger metrics o k response has a 3xx status code
func (o *RenderTriggerMetricsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render trigger metrics o k response has a 4xx status code
func (o *RenderTriggerMetricsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this render trigger metrics o k response has a 5xx status code
func (o *RenderTriggerMetricsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this render trigger metrics o k response a status code equal to that given
func (o *RenderTriggerMetricsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the render trigger metrics o k response
func (o *RenderTriggerMetricsOK) Code() int {
	return 200
}

func (o *RenderTriggerMetricsOK) Error() string {
	return fmt.Sprintf("[GET /trigger/{triggerID}/render][%d] renderTriggerMetricsOK ", 200)
}

func (o *RenderTriggerMetricsOK) String() string {
	return fmt.Sprintf("[GET /trigger/{triggerID}/render][%d] renderTriggerMetricsOK ", 200)
}

func (o *RenderTriggerMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenderTriggerMetricsBadRequest creates a RenderTriggerMetricsBadRequest with default headers values
func NewRenderTriggerMetricsBadRequest() *RenderTriggerMetricsBadRequest {
	return &RenderTriggerMetricsBadRequest{}
}

/*
RenderTriggerMetricsBadRequest describes a response with status code 400, with default header values.

Bad request from client
*/
type RenderTriggerMetricsBadRequest struct {
	Payload *models.APIErrorInvalidRequestExample
}

// IsSuccess returns true when this render trigger metrics bad request response has a 2xx status code
func (o *RenderTriggerMetricsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render trigger metrics bad request response has a 3xx status code
func (o *RenderTriggerMetricsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render trigger metrics bad request response has a 4xx status code
func (o *RenderTriggerMetricsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this render trigger metrics bad request response has a 5xx status code
func (o *RenderTriggerMetricsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this render trigger metrics bad request response a status code equal to that given
func (o *RenderTriggerMetricsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the render trigger metrics bad request response
func (o *RenderTriggerMetricsBadRequest) Code() int {
	return 400
}

func (o *RenderTriggerMetricsBadRequest) Error() string {
	return fmt.Sprintf("[GET /trigger/{triggerID}/render][%d] renderTriggerMetricsBadRequest  %+v", 400, o.Payload)
}

func (o *RenderTriggerMetricsBadRequest) String() string {
	return fmt.Sprintf("[GET /trigger/{triggerID}/render][%d] renderTriggerMetricsBadRequest  %+v", 400, o.Payload)
}

func (o *RenderTriggerMetricsBadRequest) GetPayload() *models.APIErrorInvalidRequestExample {
	return o.Payload
}

func (o *RenderTriggerMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorInvalidRequestExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderTriggerMetricsNotFound creates a RenderTriggerMetricsNotFound with default headers values
func NewRenderTriggerMetricsNotFound() *RenderTriggerMetricsNotFound {
	return &RenderTriggerMetricsNotFound{}
}

/*
RenderTriggerMetricsNotFound describes a response with status code 404, with default header values.

Resource not found
*/
type RenderTriggerMetricsNotFound struct {
	Payload *models.APIErrorNotFoundExample
}

// IsSuccess returns true when this render trigger metrics not found response has a 2xx status code
func (o *RenderTriggerMetricsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render trigger metrics not found response has a 3xx status code
func (o *RenderTriggerMetricsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render trigger metrics not found response has a 4xx status code
func (o *RenderTriggerMetricsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this render trigger metrics not found response has a 5xx status code
func (o *RenderTriggerMetricsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this render trigger metrics not found response a status code equal to that given
func (o *RenderTriggerMetricsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the render trigger metrics not found response
func (o *RenderTriggerMetricsNotFound) Code() int {
	return 404
}

func (o *RenderTriggerMetricsNotFound) Error() string {
	return fmt.Sprintf("[GET /trigger/{triggerID}/render][%d] renderTriggerMetricsNotFound  %+v", 404, o.Payload)
}

func (o *RenderTriggerMetricsNotFound) String() string {
	return fmt.Sprintf("[GET /trigger/{triggerID}/render][%d] renderTriggerMetricsNotFound  %+v", 404, o.Payload)
}

func (o *RenderTriggerMetricsNotFound) GetPayload() *models.APIErrorNotFoundExample {
	return o.Payload
}

func (o *RenderTriggerMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorNotFoundExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderTriggerMetricsInternalServerError creates a RenderTriggerMetricsInternalServerError with default headers values
func NewRenderTriggerMetricsInternalServerError() *RenderTriggerMetricsInternalServerError {
	return &RenderTriggerMetricsInternalServerError{}
}

/*
RenderTriggerMetricsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RenderTriggerMetricsInternalServerError struct {
	Payload *models.APIErrorInternalServerExample
}

// IsSuccess returns true when this render trigger metrics internal server error response has a 2xx status code
func (o *RenderTriggerMetricsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render trigger metrics internal server error response has a 3xx status code
func (o *RenderTriggerMetricsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render trigger metrics internal server error response has a 4xx status code
func (o *RenderTriggerMetricsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this render trigger metrics internal server error response has a 5xx status code
func (o *RenderTriggerMetricsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this render trigger metrics internal server error response a status code equal to that given
func (o *RenderTriggerMetricsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the render trigger metrics internal server error response
func (o *RenderTriggerMetricsInternalServerError) Code() int {
	return 500
}

func (o *RenderTriggerMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /trigger/{triggerID}/render][%d] renderTriggerMetricsInternalServerError  %+v", 500, o.Payload)
}

func (o *RenderTriggerMetricsInternalServerError) String() string {
	return fmt.Sprintf("[GET /trigger/{triggerID}/render][%d] renderTriggerMetricsInternalServerError  %+v", 500, o.Payload)
}

func (o *RenderTriggerMetricsInternalServerError) GetPayload() *models.APIErrorInternalServerExample {
	return o.Payload
}

func (o *RenderTriggerMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorInternalServerExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
