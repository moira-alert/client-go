// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRemoveSubscriptionParams creates a new RemoveSubscriptionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRemoveSubscriptionParams() *RemoveSubscriptionParams {
	return &RemoveSubscriptionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveSubscriptionParamsWithTimeout creates a new RemoveSubscriptionParams object
// with the ability to set a timeout on a request.
func NewRemoveSubscriptionParamsWithTimeout(timeout time.Duration) *RemoveSubscriptionParams {
	return &RemoveSubscriptionParams{
		timeout: timeout,
	}
}

// NewRemoveSubscriptionParamsWithContext creates a new RemoveSubscriptionParams object
// with the ability to set a context for a request.
func NewRemoveSubscriptionParamsWithContext(ctx context.Context) *RemoveSubscriptionParams {
	return &RemoveSubscriptionParams{
		Context: ctx,
	}
}

// NewRemoveSubscriptionParamsWithHTTPClient creates a new RemoveSubscriptionParams object
// with the ability to set a custom HTTPClient for a request.
func NewRemoveSubscriptionParamsWithHTTPClient(client *http.Client) *RemoveSubscriptionParams {
	return &RemoveSubscriptionParams{
		HTTPClient: client,
	}
}

/*
RemoveSubscriptionParams contains all the parameters to send to the API endpoint

	for the remove subscription operation.

	Typically these are written to a http.Request.
*/
type RemoveSubscriptionParams struct {

	/* SubscriptionID.

	   ID of the subscription to remove

	   Default: "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c"
	*/
	SubscriptionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the remove subscription params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveSubscriptionParams) WithDefaults() *RemoveSubscriptionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the remove subscription params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveSubscriptionParams) SetDefaults() {
	var (
		subscriptionIDDefault = string("bcba82f5-48cf-44c0-b7d6-e1d32c64a88c")
	)

	val := RemoveSubscriptionParams{
		SubscriptionID: subscriptionIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the remove subscription params
func (o *RemoveSubscriptionParams) WithTimeout(timeout time.Duration) *RemoveSubscriptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove subscription params
func (o *RemoveSubscriptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove subscription params
func (o *RemoveSubscriptionParams) WithContext(ctx context.Context) *RemoveSubscriptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove subscription params
func (o *RemoveSubscriptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove subscription params
func (o *RemoveSubscriptionParams) WithHTTPClient(client *http.Client) *RemoveSubscriptionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove subscription params
func (o *RemoveSubscriptionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubscriptionID adds the subscriptionID to the remove subscription params
func (o *RemoveSubscriptionParams) WithSubscriptionID(subscriptionID string) *RemoveSubscriptionParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the remove subscription params
func (o *RemoveSubscriptionParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param subscriptionID
	if err := r.SetPathParam("subscriptionID", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
