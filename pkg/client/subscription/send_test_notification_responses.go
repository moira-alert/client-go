// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moira-alert/client-go/pkg/models"
)

// SendTestNotificationReader is a Reader for the SendTestNotification structure.
type SendTestNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendTestNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSendTestNotificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSendTestNotificationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSendTestNotificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSendTestNotificationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /subscription/{subscriptionID}/test] send-test-notification", response, response.Code())
	}
}

// NewSendTestNotificationOK creates a SendTestNotificationOK with default headers values
func NewSendTestNotificationOK() *SendTestNotificationOK {
	return &SendTestNotificationOK{}
}

/*
SendTestNotificationOK describes a response with status code 200, with default header values.

Test notification sent successfully
*/
type SendTestNotificationOK struct {
}

// IsSuccess returns true when this send test notification o k response has a 2xx status code
func (o *SendTestNotificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this send test notification o k response has a 3xx status code
func (o *SendTestNotificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send test notification o k response has a 4xx status code
func (o *SendTestNotificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this send test notification o k response has a 5xx status code
func (o *SendTestNotificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this send test notification o k response a status code equal to that given
func (o *SendTestNotificationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the send test notification o k response
func (o *SendTestNotificationOK) Code() int {
	return 200
}

func (o *SendTestNotificationOK) Error() string {
	return fmt.Sprintf("[PUT /subscription/{subscriptionID}/test][%d] sendTestNotificationOK ", 200)
}

func (o *SendTestNotificationOK) String() string {
	return fmt.Sprintf("[PUT /subscription/{subscriptionID}/test][%d] sendTestNotificationOK ", 200)
}

func (o *SendTestNotificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSendTestNotificationForbidden creates a SendTestNotificationForbidden with default headers values
func NewSendTestNotificationForbidden() *SendTestNotificationForbidden {
	return &SendTestNotificationForbidden{}
}

/*
SendTestNotificationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SendTestNotificationForbidden struct {
	Payload *models.APIErrorForbiddenExample
}

// IsSuccess returns true when this send test notification forbidden response has a 2xx status code
func (o *SendTestNotificationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send test notification forbidden response has a 3xx status code
func (o *SendTestNotificationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send test notification forbidden response has a 4xx status code
func (o *SendTestNotificationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this send test notification forbidden response has a 5xx status code
func (o *SendTestNotificationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this send test notification forbidden response a status code equal to that given
func (o *SendTestNotificationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the send test notification forbidden response
func (o *SendTestNotificationForbidden) Code() int {
	return 403
}

func (o *SendTestNotificationForbidden) Error() string {
	return fmt.Sprintf("[PUT /subscription/{subscriptionID}/test][%d] sendTestNotificationForbidden  %+v", 403, o.Payload)
}

func (o *SendTestNotificationForbidden) String() string {
	return fmt.Sprintf("[PUT /subscription/{subscriptionID}/test][%d] sendTestNotificationForbidden  %+v", 403, o.Payload)
}

func (o *SendTestNotificationForbidden) GetPayload() *models.APIErrorForbiddenExample {
	return o.Payload
}

func (o *SendTestNotificationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorForbiddenExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendTestNotificationNotFound creates a SendTestNotificationNotFound with default headers values
func NewSendTestNotificationNotFound() *SendTestNotificationNotFound {
	return &SendTestNotificationNotFound{}
}

/*
SendTestNotificationNotFound describes a response with status code 404, with default header values.

Resource not found
*/
type SendTestNotificationNotFound struct {
	Payload *models.APIErrorNotFoundExample
}

// IsSuccess returns true when this send test notification not found response has a 2xx status code
func (o *SendTestNotificationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send test notification not found response has a 3xx status code
func (o *SendTestNotificationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send test notification not found response has a 4xx status code
func (o *SendTestNotificationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this send test notification not found response has a 5xx status code
func (o *SendTestNotificationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this send test notification not found response a status code equal to that given
func (o *SendTestNotificationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the send test notification not found response
func (o *SendTestNotificationNotFound) Code() int {
	return 404
}

func (o *SendTestNotificationNotFound) Error() string {
	return fmt.Sprintf("[PUT /subscription/{subscriptionID}/test][%d] sendTestNotificationNotFound  %+v", 404, o.Payload)
}

func (o *SendTestNotificationNotFound) String() string {
	return fmt.Sprintf("[PUT /subscription/{subscriptionID}/test][%d] sendTestNotificationNotFound  %+v", 404, o.Payload)
}

func (o *SendTestNotificationNotFound) GetPayload() *models.APIErrorNotFoundExample {
	return o.Payload
}

func (o *SendTestNotificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorNotFoundExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendTestNotificationInternalServerError creates a SendTestNotificationInternalServerError with default headers values
func NewSendTestNotificationInternalServerError() *SendTestNotificationInternalServerError {
	return &SendTestNotificationInternalServerError{}
}

/*
SendTestNotificationInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type SendTestNotificationInternalServerError struct {
	Payload *models.APIErrorInternalServerExample
}

// IsSuccess returns true when this send test notification internal server error response has a 2xx status code
func (o *SendTestNotificationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send test notification internal server error response has a 3xx status code
func (o *SendTestNotificationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send test notification internal server error response has a 4xx status code
func (o *SendTestNotificationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this send test notification internal server error response has a 5xx status code
func (o *SendTestNotificationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this send test notification internal server error response a status code equal to that given
func (o *SendTestNotificationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the send test notification internal server error response
func (o *SendTestNotificationInternalServerError) Code() int {
	return 500
}

func (o *SendTestNotificationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /subscription/{subscriptionID}/test][%d] sendTestNotificationInternalServerError  %+v", 500, o.Payload)
}

func (o *SendTestNotificationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /subscription/{subscriptionID}/test][%d] sendTestNotificationInternalServerError  %+v", 500, o.Payload)
}

func (o *SendTestNotificationInternalServerError) GetPayload() *models.APIErrorInternalServerExample {
	return o.Payload
}

func (o *SendTestNotificationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorInternalServerExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
