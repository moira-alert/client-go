// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moira-alert/client-go/pkg/models"
)

// RemoveSubscriptionReader is a Reader for the RemoveSubscription structure.
type RemoveSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRemoveSubscriptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /subscription/{subscriptionID}] remove-subscription", response, response.Code())
	}
}

// NewRemoveSubscriptionOK creates a RemoveSubscriptionOK with default headers values
func NewRemoveSubscriptionOK() *RemoveSubscriptionOK {
	return &RemoveSubscriptionOK{}
}

/*
RemoveSubscriptionOK describes a response with status code 200, with default header values.

Subscription deleted
*/
type RemoveSubscriptionOK struct {
}

// IsSuccess returns true when this remove subscription o k response has a 2xx status code
func (o *RemoveSubscriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove subscription o k response has a 3xx status code
func (o *RemoveSubscriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove subscription o k response has a 4xx status code
func (o *RemoveSubscriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove subscription o k response has a 5xx status code
func (o *RemoveSubscriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove subscription o k response a status code equal to that given
func (o *RemoveSubscriptionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remove subscription o k response
func (o *RemoveSubscriptionOK) Code() int {
	return 200
}

func (o *RemoveSubscriptionOK) Error() string {
	return fmt.Sprintf("[DELETE /subscription/{subscriptionID}][%d] removeSubscriptionOK ", 200)
}

func (o *RemoveSubscriptionOK) String() string {
	return fmt.Sprintf("[DELETE /subscription/{subscriptionID}][%d] removeSubscriptionOK ", 200)
}

func (o *RemoveSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveSubscriptionForbidden creates a RemoveSubscriptionForbidden with default headers values
func NewRemoveSubscriptionForbidden() *RemoveSubscriptionForbidden {
	return &RemoveSubscriptionForbidden{}
}

/*
RemoveSubscriptionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RemoveSubscriptionForbidden struct {
	Payload *models.APIErrorForbiddenExample
}

// IsSuccess returns true when this remove subscription forbidden response has a 2xx status code
func (o *RemoveSubscriptionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove subscription forbidden response has a 3xx status code
func (o *RemoveSubscriptionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove subscription forbidden response has a 4xx status code
func (o *RemoveSubscriptionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove subscription forbidden response has a 5xx status code
func (o *RemoveSubscriptionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this remove subscription forbidden response a status code equal to that given
func (o *RemoveSubscriptionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the remove subscription forbidden response
func (o *RemoveSubscriptionForbidden) Code() int {
	return 403
}

func (o *RemoveSubscriptionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /subscription/{subscriptionID}][%d] removeSubscriptionForbidden  %+v", 403, o.Payload)
}

func (o *RemoveSubscriptionForbidden) String() string {
	return fmt.Sprintf("[DELETE /subscription/{subscriptionID}][%d] removeSubscriptionForbidden  %+v", 403, o.Payload)
}

func (o *RemoveSubscriptionForbidden) GetPayload() *models.APIErrorForbiddenExample {
	return o.Payload
}

func (o *RemoveSubscriptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorForbiddenExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveSubscriptionNotFound creates a RemoveSubscriptionNotFound with default headers values
func NewRemoveSubscriptionNotFound() *RemoveSubscriptionNotFound {
	return &RemoveSubscriptionNotFound{}
}

/*
RemoveSubscriptionNotFound describes a response with status code 404, with default header values.

Resource not found
*/
type RemoveSubscriptionNotFound struct {
	Payload *models.APIErrorNotFoundExample
}

// IsSuccess returns true when this remove subscription not found response has a 2xx status code
func (o *RemoveSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove subscription not found response has a 3xx status code
func (o *RemoveSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove subscription not found response has a 4xx status code
func (o *RemoveSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove subscription not found response has a 5xx status code
func (o *RemoveSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove subscription not found response a status code equal to that given
func (o *RemoveSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove subscription not found response
func (o *RemoveSubscriptionNotFound) Code() int {
	return 404
}

func (o *RemoveSubscriptionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /subscription/{subscriptionID}][%d] removeSubscriptionNotFound  %+v", 404, o.Payload)
}

func (o *RemoveSubscriptionNotFound) String() string {
	return fmt.Sprintf("[DELETE /subscription/{subscriptionID}][%d] removeSubscriptionNotFound  %+v", 404, o.Payload)
}

func (o *RemoveSubscriptionNotFound) GetPayload() *models.APIErrorNotFoundExample {
	return o.Payload
}

func (o *RemoveSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorNotFoundExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveSubscriptionInternalServerError creates a RemoveSubscriptionInternalServerError with default headers values
func NewRemoveSubscriptionInternalServerError() *RemoveSubscriptionInternalServerError {
	return &RemoveSubscriptionInternalServerError{}
}

/*
RemoveSubscriptionInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RemoveSubscriptionInternalServerError struct {
	Payload *models.APIErrorInternalServerExample
}

// IsSuccess returns true when this remove subscription internal server error response has a 2xx status code
func (o *RemoveSubscriptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove subscription internal server error response has a 3xx status code
func (o *RemoveSubscriptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove subscription internal server error response has a 4xx status code
func (o *RemoveSubscriptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove subscription internal server error response has a 5xx status code
func (o *RemoveSubscriptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove subscription internal server error response a status code equal to that given
func (o *RemoveSubscriptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove subscription internal server error response
func (o *RemoveSubscriptionInternalServerError) Code() int {
	return 500
}

func (o *RemoveSubscriptionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /subscription/{subscriptionID}][%d] removeSubscriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveSubscriptionInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /subscription/{subscriptionID}][%d] removeSubscriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveSubscriptionInternalServerError) GetPayload() *models.APIErrorInternalServerExample {
	return o.Payload
}

func (o *RemoveSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorInternalServerExample)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
